user  root;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # 외부 클라이언트와의 단방향 HTTPS (공식 CA 인증서 사용)
    server {
        listen 443 ssl;
        server_name wudc.link;  # ngrok의 public URL 또는 원하는 도메인

        # 공식 CA 인증서 (외부용)
        ssl_certificate /certs/fullchain.pem;  # fullchain.pem
        ssl_certificate_key /certs/privkey.pem;  # privkey.pem
        #ssl_certificate /certs/server-cert.pem;
        #ssl_certificate_key /certs/server-key-nopass.pem;
        ssl_verify_client off;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_dhparam /certs/dhparam.pem;

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        location / {
            # 내부 devlog-app과의 연결은 mutual TLS 사용
            proxy_pass https://devlog-app:443;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # nginx가 devlog-app에 요청할 때 클라이언트 인증서 제공 (mutual TLS)
            proxy_ssl_certificate /certs/client-cert.pem;
            proxy_ssl_certificate_key /certs/client-key-nopass.pem;
            proxy_ssl_trusted_certificate /certs/ca.pem;
            proxy_ssl_verify on;
        }
    }

    # HTTP → HTTPS 리디렉션
    server {
        listen 80;
        server_name wudc.link;
        return 301 https://$host$request_uri;
    }
}
